from __future__ import annotations

import logging
import pathlib
import uuid
from typing import Dict

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    Document,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from bot.utils.resume_tools import (
    analyse_resume,
    extract_text,
)
from services import VacancyService
from settings.config import setup

router = Router(name="resume_fsm")
log = logging.getLogger(__name__)

_tips_cache: Dict[str, str] = {}


class ResumeFSM(StatesGroup):
    waiting_for_file = State()


def _humanize_missing(text: str | None) -> str:
    return text.strip() if text and text.strip() else "‚Äî"


@router.message(ResumeFSM.waiting_for_file, F.document)
async def handle_resume(m: Message, state: FSMContext) -> None:
    vac_id = (await state.get_data()).get("vacancy_id")
    processing = await m.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ‚Ä¶")

    doc: Document = m.document
    ext = pathlib.Path(doc.file_name or "").suffix.lower()
    if ext not in {".txt", ".pdf", ".doc", ".docx"}:
        await processing.edit_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF, DOC/DOCX –∏–ª–∏ TXT.")
        return

    dst = pathlib.Path(setup.data_dir) / f"{uuid.uuid4().hex}{ext}"
    try:
        tg_file = await m.bot.get_file(doc.file_id)
        await m.bot.download_file(tg_file.file_path, destination=str(dst))
    except Exception as exc:
        log.exception("download_file failed")
        await processing.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {exc}")
        return

    try:
        cv_text = extract_text(dst)
    except Exception as exc:
        log.exception("extract_text failed")
        await processing.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {exc}")
        return

    vacancy = await VacancyService.by_id(vac_id)
    if not vacancy:
        await processing.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    try:
        meta = await analyse_resume(cv_text, vacancy.description or vacancy.title)
    except Exception as exc:
        log.exception("analyse_resume failed")
        await processing.edit_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {exc}")
        await state.clear()
        return

    rating = float(meta.get("rating", 0))

    if rating >= 40:
        token = uuid.uuid4().hex
        _tips_cache[token] = meta.get("interview_tips", "‚Äî")

        caption = (
            "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ.\n\n"
            '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href="https://t.me/rakestep/">ICE breaker</a>, '
            "—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –ò–ò, —Ñ–∏–Ω—Ç–µ—Ö–∞ –∏ –±–ª–æ–∫—á–µ–π–Ω–∞."
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã", callback_data=f"tips_{token}"
                    ),
                    InlineKeyboardButton(
                        text="–ù–µ –Ω—É–∂–Ω–æ", callback_data=f"tips_no_{token}"
                    ),
                ]
            ]
        )
        await m.answer_photo(
            photo=FSInputFile("data/static/thanks_rake.png"),
            caption=caption,
            reply_markup=kb,
        )
        await processing.delete()
    else:
        await processing.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ–ø—ã—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏."
        )

    await state.clear()

    if getattr(setup, "summary_chat_id", None):
        vac_tag = vacancy.title.replace(" ", "_")
        qs = meta.get("interview_questions", []) + ["‚Äî", "‚Äî", "‚Äî"]
        username = m.from_user.username or "‚Äî"

        summary = (
            f"#{vac_tag}\n"
            f"–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞ {rating:.0f}%\n\n"
            f"üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {meta.get('strong', '‚Äî')}\n"
            f"üìâ –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {meta.get('weak', '‚Äî')}\n"
            f"üîó –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç: {meta.get('matched_experience', '‚Äî')}\n"
            f"üö´ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞: {_humanize_missing(meta.get('missing_experience'))}\n"
            f"üíß ¬´–í–æ–¥–∞¬ª: {meta.get('water', '‚Äî')}\n"
            f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è / –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è: "
            f"{meta.get('mismatches') or meta.get('suspicious') or '‚Äî'}\n\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å—ã:\n‚Ä¢ {qs[0]}\n‚Ä¢ {qs[1]}\n‚Ä¢ {qs[2]}\n\n"
            f"üì± @{username}"
        )
        try:
            await m.bot.send_message(setup.summary_chat_id, summary)
        except Exception:
            pass


@router.callback_query(F.data.startswith("tips_no_"))
async def skip_tips(cb: CallbackQuery) -> None:
    try:
        await cb.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    except Exception:
        pass

    await cb.message.answer("–•–æ—Ä–æ—à–æ, –≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    _tips_cache.pop(cb.data.split("_", 2)[2], None)
    await cb.answer()


@router.callback_query(F.data.startswith("tips_"))
async def send_tips(cb: CallbackQuery) -> None:
    try:
        await cb.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    except Exception:
        pass

    token = cb.data.split("_", 1)[1]
    tips = _tips_cache.pop(token, None)
    if tips:
        await cb.message.answer(f"üí° –°–æ–≤–µ—Ç—ã –æ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n\n{tips}")
    else:
        await cb.message.answer("–°–æ–≤–µ—Ç—ã —É–∂–µ –≤—ã–¥–∞–Ω—ã –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await cb.answer()


@router.message(ResumeFSM.waiting_for_file, F.text.casefold() == "/cancel")
async def cancel(m: Message, state: FSMContext) -> None:
    await m.answer("–û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.clear()
