from __future__ import annotations

import datetime as dt
import pathlib
from uuid import uuid4

from aiogram import F, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from bot.handlers.resume import ALLOWED_EXT, extract_text, process_resume
from bot.keyboards import POST_UPLOAD_KB, vacancy_inline_kb
from settings.config import setup
from vacancies import VACANCIES

router = Router()

MSG_FMT_UNSUPPORTED = (
    "‚ùå –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. " "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª DOC/DOCX, PDF –∏–ª–∏ TXT."
)
MSG_MENU_HELP = "‚ÑπÔ∏è –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
MSG_AFTER_UPLOAD = (
    "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n"
    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @rakestep, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."
)


# /start
@router.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext) -> None:
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=types.ReplyKeyboardRemove())
    await m.answer("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=vacancy_inline_kb())
    await state.clear()


# /info
@router.message(Command("info"))
async def cmd_info(m: types.Message) -> None:
    await m.answer(
        "1Ô∏è‚É£ /start ‚Äì —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
        "2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF/DOCX/TXT)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏:"
        " ¬´üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏¬ª –∏ ¬´üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ¬ª."
    )


# reply-–∫–Ω–æ–ø–∫–∞ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏¬ª
@router.message(F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(m: types.Message) -> None:
    await m.answer("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=vacancy_inline_kb())


# reply-–∫–Ω–æ–ø–∫–∞ ¬´–ú–æ—ë —Ä–µ–∑—é–º–µ¬ª
@router.message(F.text == "üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ")
async def send_my_resume(m: types.Message, state: FSMContext) -> None:
    file_id = (await state.get_data()).get("resume_file_id")
    await (
        m.answer_document(file_id)
        if file_id
        else m.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∑—é–º–µ.")
    )


# –≤—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
@router.callback_query(F.data.startswith("vac|"))
async def choose_vacancy(cb: types.CallbackQuery, state: FSMContext) -> None:
    vacancy = cb.data.split("|", 1)[1]
    await state.update_data(vacancy=vacancy)
    await cb.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{vacancy}</b>\n" "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª PDF, DOC/DOCX –∏–ª–∏ TXT —Å —Ä–µ–∑—é–º–µ."
    )
    await cb.answer()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.message(F.document)
async def handle_document(m: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    vacancy = data.get("vacancy")
    if not vacancy:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ /start.")

    ext = pathlib.Path(m.document.file_name or "").suffix.lower()
    if ext not in ALLOWED_EXT:
        return await m.answer(MSG_FMT_UNSUPPORTED)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    ts = dt.datetime.utcnow().strftime("%Y%m%dT%H%M%S")
    target = pathlib.Path(setup.data_dir) / f"{ts}_{uuid4().hex}{ext}"
    file_info = await m.bot.get_file(m.document.file_id)
    await m.bot.download_file(file_info.file_path, destination=target)

    resume_txt = extract_text(str(target))
    meta = await process_resume(
        file_path=str(target),
        resume_text=resume_txt,
        vacancy_name=vacancy,
        vacancy_text=VACANCIES[vacancy],
        user_id=m.from_user.id,
    )

    await state.update_data(resume_file_id=m.document.file_id)
    await m.answer(MSG_AFTER_UPLOAD, reply_markup=POST_UPLOAD_KB)

    caption = (
        f'{meta["tag"]} {meta["rating"]:.0f}% ‚Äî <b>{vacancy}</b>\n'
        f'{meta["summary"]}\n'
        f'–°–æ–≤–µ—Ç—ã: {meta["interview_tips"]}'
    )
    await m.bot.send_document(
        setup.summary_chat_id, m.document.file_id, caption=caption
    )


# –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def catch_all(m: types.Message) -> None:
    await m.answer(MSG_MENU_HELP)
