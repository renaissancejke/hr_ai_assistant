import os, datetime, pathlib
from uuid import uuid4

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from settings.config import setup
from vacancies import VACANCIES
from bot.keyboards import (
    MAIN_REPLY_KB,
    post_upload_kb,
    vacancy_inline_kb,
)
from bot.handlers.resume import process_resume, extract_text

router = Router()


@router.message(CommandStart())
async def cmd_start(msg: types.Message, state: FSMContext) -> None:

    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏¬ª</b> "
        "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=MAIN_REPLY_KB,
    )
    await msg.answer(
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:",
        reply_markup=vacancy_inline_kb(),
    )
    await state.clear()


@router.message(Command("info"))
async def cmd_info(msg: types.Message) -> None:

    text = (
        "<b>ü§ñ HR-Assistant Bot</b>\n\n"
        "–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –µ–≥–æ "
        "—Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
        "üëâ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏¬ª –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é\n"
        "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF, DOC/DOCX –∏–ª–∏ TXT —Å —Ä–µ–∑—é–º–µ\n"
        "4Ô∏è‚É£ –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –æ—Ç—á—ë—Ç HR-–∫–æ–º–∞–Ω–¥–µ\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ¬ª ‚Äî "
        "–æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
    )
    await msg.answer(text)


@router.message(F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(msg: types.Message, state: FSMContext) -> None:

    await msg.answer(
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:",
        reply_markup=vacancy_inline_kb(),
    )


@router.message(F.text == "üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ")
async def send_my_resume(msg: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    file_id = data.get("resume_file_id")
    if file_id:
        await msg.answer_document(file_id)
    else:
        await msg.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∑—é–º–µ.")


@router.callback_query(F.data.startswith("vac|"))
async def choose_vacancy(cb: types.CallbackQuery, state: FSMContext) -> None:
    vacancy = cb.data.split("|", 1)[1]
    await state.update_data(vacancy=vacancy)
    await cb.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{vacancy}</b>.\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ PDF, DOC/DOCX –∏–ª–∏ TXT —Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ."
    )
    await cb.answer()


@router.message(F.document)
async def handle_document(msg: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    if "vacancy" not in data:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /start).")
        return

    filename = (msg.document.file_name or "").lower()
    ext = pathlib.Path(filename).suffix.lstrip(".")
    ALLOWED = {"txt", "pdf", "doc", "docx"}
    if ext not in ALLOWED:
        await msg.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF, DOC, DOCX –∏ TXT.")
        return

    ts = datetime.datetime.utcnow().strftime("%Y%m%dT%H%M%S")
    save_name = f"{ts}_{uuid4().hex}.{ext}"
    path = os.path.join(setup.data_dir, save_name)

    file_info = await msg.bot.get_file(msg.document.file_id)
    await msg.bot.download_file(file_info.file_path, destination=path)

    resume_txt = extract_text(path)

    vacancy_name = data["vacancy"]
    vacancy_text = VACANCIES[vacancy_name]
    meta = await process_resume(
        file_path=path,
        resume_text=resume_txt,
        vacancy_name=vacancy_name,
        vacancy_text=vacancy_text,
        user_id=msg.from_user.id,
    )

    await state.update_data(resume_file_id=msg.document.file_id)

    await msg.answer(
        "–°–ø–∞—Å–∏–±–æ! –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @rakestep, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.",
        reply_markup=post_upload_kb(),
    )

    caption = (
        f'{meta["tag"]} {meta["rating"]:.0f}% ‚Äî <b>{vacancy_name}</b>\n'
        f'{meta["summary"]}\n'
        f'–°–æ–≤–µ—Ç—ã: {meta["interview_tips"]}'
    )
    await msg.bot.send_document(
        setup.summary_chat_id,
        msg.document.file_id,
        caption=caption,
    )
