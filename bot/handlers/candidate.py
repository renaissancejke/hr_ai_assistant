from __future__ import annotations

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

from bot.handlers.resume_fsm import ResumeFSM
from bot.keyboards import vacancy_inline_kb
from services import VacancyService

router = Router(name="candidate")


#  –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ + –∫–Ω–æ–ø–∫–∏


@router.callback_query(F.data.startswith("vac_"))
async def show_vacancy(cq: CallbackQuery) -> None:
    vac_id = int(cq.data.split("_", 1)[1])
    vacancy = await VacancyService.by_id(vac_id)
    if not vacancy:
        await cq.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = (
        f"<b>{vacancy.title}</b>\n\n"
        f"{vacancy.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìé –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"respond_{vacancy.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ö —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="back_vacancies"
                )
            ],
        ]
    )
    await cq.message.answer(text, reply_markup=kb, disable_web_page_preview=True)
    await cq.answer()


#  –ö–Ω–æ–ø–∫–∞ ¬´üìé –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è¬ª


@router.callback_query(F.data.startswith("respond_"))
async def start_respond(cb: CallbackQuery, state: FSMContext) -> None:
    vac_id = int(cb.data.split("_", 1)[1])

    vacancy = await VacancyService.by_id(vac_id)
    if not vacancy:
        await cb.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.update_data(vacancy_id=vac_id)
    await state.set_state(ResumeFSM.waiting_for_file)

    await cb.message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª-—Ä–µ–∑—é–º–µ (PDF, DOC/DOCX –∏–ª–∏ TXT).\n" "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel",
    )
    await cb.answer()


#  –ö–Ω–æ–ø–∫–∞ ¬´üîô –ö —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π¬ª


@router.callback_query(F.data == "back_vacancies")
async def back_to_vacancies(cb: CallbackQuery) -> None:
    kb = await vacancy_inline_kb()  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    if kb.inline_keyboard:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=kb)
    else:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
    await cb.answer()
