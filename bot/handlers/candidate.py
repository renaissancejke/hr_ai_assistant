from __future__ import annotations

import datetime as dt
import pathlib
import typing as t
from uuid import uuid4

from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from pathlib import Path
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.resume import ALLOWED_EXT, extract_text, process_resume
from bot.keyboards import (
    POST_UPLOAD_KB,
    vacancy_inline_kb,
    GET_TIPS_KB,
)
from settings.config import setup
from vacancies import VACANCIES

router = Router()

MSG_WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø –ø–æ–º–æ–≥—É —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ RakeStep.\n\n"
    "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é:"
)
MSG_MENU_HELP = (
    "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n" "‚Ä¢ /start ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é\n" "‚Ä¢ /info  ‚Äî –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
)
MSG_FMT_UNSUPPORTED = (
    "‚ùå –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏—Ç–µ PDF, DOC/DOCX –∏–ª–∏ TXT-—Ñ–∞–π–ª."
)
MSG_PROCESSING = "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ —Ä–µ–∑—é–º–µ‚Ä¶"
MSG_SUCCESS = (
    "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n"
    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @rakestep, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."
)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def humanize_missing(value: t.Any) -> str:

    if not value:
        return "–∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö"

    if isinstance(value, str):
        return value.strip().rstrip(".;,")  # —É–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é

    if isinstance(value, (list, tuple)):
        joined = ", ".join(map(str, value[:3]))
        return joined.rstrip(".;,")

    return str(value).rstrip(".;,")


def build_hr_caption(vacancy: str, meta: dict, username: str | None) -> str:
    vacancy_tag = f"#{vacancy.replace(' ', '_')}"
    missing = humanize_missing(meta.get("missing_experience"))
    questions = meta["interview_questions"]

    return (
        f"{vacancy_tag}\n"
        f"–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞ {meta['rating']:.0f}%\n\n"
        f"üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {meta['strong']}\n"
        f"üìâ –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {meta['weak']}\n"
        f"üîó –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç: {meta['matched_experience']}\n"
        f"üö´ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞: {missing}\n"
        f"üíß ¬´–í–æ–¥–∞¬ª: {meta['water']}\n"
        f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è / –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è: "
        f"{meta['mismatches'] or meta['suspicious']}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:\n"
        f"‚Ä¢ {questions[0]}\n"
        f"‚Ä¢ {questions[1]}\n"
        f"‚Ä¢ {questions[2]}\n\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: @{username or '‚Äî'}"
    )


@router.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer(MSG_WELCOME, reply_markup=vacancy_inline_kb())


@router.message(Command("info"))
async def cmd_info(m: types.Message) -> None:
    await m.answer(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1Ô∏è‚É£ /start ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ (PDF/DOCX/TXT)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–π—Ç–∏–Ω–≥\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏:\n"
        "‚Ä¢ ¬´üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏¬ª\n"
        "‚Ä¢ ¬´üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ¬ª"
    )


@router.message(F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(m: types.Message) -> None:
    await m.answer("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=vacancy_inline_kb())


@router.message(F.text == "üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ")
async def send_my_resume(m: types.Message, state: FSMContext) -> None:
    file_id = (await state.get_data()).get("resume_file_id")
    if file_id:
        await m.answer_document(file_id)
    else:
        await m.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∑—é–º–µ.")


@router.callback_query(F.data.startswith("vac|"))
async def choose_vacancy(cb: types.CallbackQuery, state: FSMContext) -> None:
    _, vacancy = cb.data.split("|", 1)
    await state.update_data(vacancy=vacancy)
    await cb.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{vacancy}</b>.\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª PDF, DOC/DOCX –∏–ª–∏ TXT —Å —Ä–µ–∑—é–º–µ."
    )
    await cb.answer()


@router.message(F.document)
async def handle_document(m: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    vacancy = data.get("vacancy")
    if not vacancy:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ /start.")

    ext = pathlib.Path(m.document.file_name or "").suffix.lower()
    if ext not in ALLOWED_EXT:
        return await m.answer(MSG_FMT_UNSUPPORTED)

    processing_msg = await m.answer(MSG_PROCESSING)

    ts = dt.datetime.utcnow().strftime("%Y%m%dT%H%M%S")
    target = pathlib.Path(setup.data_dir) / f"{ts}_{uuid4().hex}{ext}"
    target.parent.mkdir(parents=True, exist_ok=True)
    file_info = await m.bot.get_file(m.document.file_id)
    await m.bot.download_file(file_info.file_path, destination=target)

    resume_txt = extract_text(str(target))
    meta = await process_resume(
        file_path=str(target),
        resume_text=resume_txt,
        vacancy_name=vacancy,
        vacancy_text=VACANCIES.get(vacancy, ""),
        user_id=m.from_user.id,
    )

    if meta["rating"] < 40:
        lack = humanize_missing(meta.get("missing_experience"))
        await processing_msg.edit_text(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É —Ä–µ–∑—é–º–µ –º—ã –≤–∏–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞: {lack}."
        )
        return

    await processing_msg.edit_text(MSG_SUCCESS)
    await m.answer_photo(FSInputFile(Path("data/static/thanks.png")))

    await state.update_data(
        resume_file_id=m.document.file_id,
        interview_tips=meta.get("interview_tips", ""),
    )

    await m.answer(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è "
        "–æ—Ç –Ω–∞—à–µ–≥–æ –ò–ò-HR-–∞–≥–µ–Ω—Ç–∞?",
        reply_markup=GET_TIPS_KB,
    )

    caption = build_hr_caption(vacancy, meta, m.from_user.username)
    await m.bot.send_document(
        setup.summary_chat_id,
        m.document.file_id,
        caption=caption,
    )


@router.callback_query(F.data.startswith("tips|"))
async def tips_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    await cb.answer()

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass

    if cb.data.endswith("yes"):
        tips = (await state.get_data()).get("interview_tips") or "–°–æ–≤–µ—Ç–æ–≤ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è"
        await cb.message.answer(f"ü§ñ –°–æ–≤–µ—Ç—ã –ò–ò-HR-–∞–≥–µ–Ω—Ç–∞:\n{tips}")
    else:
        await cb.message.answer("–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏. –£–¥–∞—á–∏!")


@router.message()
async def catch_all(m: types.Message) -> None:
    await m.answer(MSG_MENU_HELP)
