from __future__ import annotations

import pathlib
from typing import Any

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from bot.keyboards import GET_TIPS_KB, POST_UPLOAD_KB, vacancy_inline_kb
from services import ResumeService
from services.errors import InvalidResumeError
from settings.config import setup

router = Router()

MSG_WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø –ø–æ–º–æ–≥—É —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ RakeStep.\n\n"
    "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é:"
)
MSG_MENU_HELP = (
    "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n" "‚Ä¢ /start ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é\n" "‚Ä¢ /info  ‚Äî –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
)
MSG_FMT_UNSUPPORTED = (
    "‚ùå –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏—Ç–µ PDF, DOC/DOCX –∏–ª–∏ TXT-—Ñ–∞–π–ª."
)
MSG_PROCESSING = "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ —Ä–µ–∑—é–º–µ‚Ä¶"
MSG_SUCCESS = (
    "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n"
    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @rakestep, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."
)


@router.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer(MSG_WELCOME, reply_markup=vacancy_inline_kb())


@router.message(Command("info"))
async def cmd_info(m: types.Message) -> None:
    await m.answer(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1Ô∏è‚É£ /start ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ (PDF/DOCX/TXT)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–π—Ç–∏–Ω–≥"
    )


@router.message(F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(m: types.Message) -> None:
    await m.answer("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=vacancy_inline_kb())


@router.message(F.text == "üìÑ –ú–æ—ë —Ä–µ–∑—é–º–µ")
async def send_my_resume(m: types.Message, state: FSMContext) -> None:
    file_id = (await state.get_data()).get("resume_file_id")
    (
        await m.answer_document(file_id)
        if file_id
        else await m.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∑—é–º–µ.")
    )


@router.callback_query(F.data.startswith("vac|"))
async def choose_vacancy(cb: types.CallbackQuery, state: FSMContext) -> None:
    _, vacancy = cb.data.split("|", 1)
    await state.update_data(vacancy=vacancy)
    await cb.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{vacancy}</b>.", parse_mode="HTML")
    await cb.message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª PDF, DOC/DOCX –∏–ª–∏ TXT —Å —Ä–µ–∑—é–º–µ.",
        reply_markup=POST_UPLOAD_KB,
    )
    await cb.answer()


@router.message(F.document)
async def handle_document(m: types.Message, state: FSMContext) -> None:
    vacancy = (await state.get_data()).get("vacancy")
    if not vacancy:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ /start.")

    ext = pathlib.Path(m.document.file_name or "").suffix.lower()
    processing = await m.answer(MSG_PROCESSING)

    try:
        meta: dict[str, Any] = await ResumeService.evaluate(
            bot=m.bot,
            tg_file=await m.bot.get_file(m.document.file_id),
            vacancy_name=vacancy,
            ext=ext,
            telegram_user_id=m.from_user.id,
        )
    except InvalidResumeError:
        await processing.edit_text(
            "–§–∞–π–ª –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ä–µ–∑—é–º–µ ü§î\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PDF, DOCX –∏–ª–∏ TXT —Å –≤–∞—à–∏–º –æ–ø—ã—Ç–æ–º."
        )
        return
    except ValueError:
        return await m.answer(MSG_FMT_UNSUPPORTED)

    if meta["rating"] < 40:
        lack = ResumeService._humanize_missing(meta.get("missing_experience"))
        await processing.edit_text(f"üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞: {lack}.")
        return

    await processing.edit_text(MSG_SUCCESS)
    if p := ResumeService.thanks_photo():
        await m.answer_photo(p)

    await state.update_data(
        resume_file_id=m.document.file_id,
        interview_tips=meta.get("interview_tips", ""),
    )

    await m.answer(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è "
        "–æ—Ç –Ω–∞—à–µ–≥–æ –ò–ò-HR-–∞–≥–µ–Ω—Ç–∞?",
        reply_markup=GET_TIPS_KB,
    )

    caption = ResumeService.build_hr_caption(vacancy, meta, m.from_user.username)
    await m.bot.send_document(
        setup.summary_chat_id, m.document.file_id, caption=caption
    )


@router.callback_query(F.data.startswith("tips|"))
async def tips_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass

    if cb.data.endswith("yes"):
        tips = (await state.get_data()).get("interview_tips") or "–°–æ–≤–µ—Ç–æ–≤ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è"
        await cb.message.answer(f"ü§ñ –°–æ–≤–µ—Ç—ã –ò–ò-HR-–∞–≥–µ–Ω—Ç–∞:\n{tips}")
    else:
        await cb.message.answer("–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏. –£–¥–∞—á–∏!")


@router.message()
async def catch_all(m: types.Message) -> None:
    await m.answer(MSG_MENU_HELP)
